// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Streamer_StreamStuff_FullMethodName = "/Streamer/StreamStuff"
)

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamerClient interface {
	StreamStuff(ctx context.Context, in *StreamStuffRequest, opts ...grpc.CallOption) (Streamer_StreamStuffClient, error)
}

type streamerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerClient(cc grpc.ClientConnInterface) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) StreamStuff(ctx context.Context, in *StreamStuffRequest, opts ...grpc.CallOption) (Streamer_StreamStuffClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streamer_ServiceDesc.Streams[0], Streamer_StreamStuff_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerStreamStuffClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamer_StreamStuffClient interface {
	Recv() (*StreamStuffResponse, error)
	grpc.ClientStream
}

type streamerStreamStuffClient struct {
	grpc.ClientStream
}

func (x *streamerStreamStuffClient) Recv() (*StreamStuffResponse, error) {
	m := new(StreamStuffResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServer is the server API for Streamer service.
// All implementations must embed UnimplementedStreamerServer
// for forward compatibility
type StreamerServer interface {
	StreamStuff(*StreamStuffRequest, Streamer_StreamStuffServer) error
	mustEmbedUnimplementedStreamerServer()
}

// UnimplementedStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamerServer struct {
}

func (UnimplementedStreamerServer) StreamStuff(*StreamStuffRequest, Streamer_StreamStuffServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStuff not implemented")
}
func (UnimplementedStreamerServer) mustEmbedUnimplementedStreamerServer() {}

// UnsafeStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamerServer will
// result in compilation errors.
type UnsafeStreamerServer interface {
	mustEmbedUnimplementedStreamerServer()
}

func RegisterStreamerServer(s grpc.ServiceRegistrar, srv StreamerServer) {
	s.RegisterService(&Streamer_ServiceDesc, srv)
}

func _Streamer_StreamStuff_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamStuffRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServer).StreamStuff(m, &streamerStreamStuffServer{stream})
}

type Streamer_StreamStuffServer interface {
	Send(*StreamStuffResponse) error
	grpc.ServerStream
}

type streamerStreamStuffServer struct {
	grpc.ServerStream
}

func (x *streamerStreamStuffServer) Send(m *StreamStuffResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Streamer_ServiceDesc is the grpc.ServiceDesc for Streamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStuff",
			Handler:       _Streamer_StreamStuff_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}
